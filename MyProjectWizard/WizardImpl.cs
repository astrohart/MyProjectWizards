using Core.Common;
using Core.Files;
using Microsoft.VisualStudio.TemplateWizard;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace MyProjectWizard
{
    /// <summary>
    /// Implements a new project wizard in Visual Studio.
    /// </summary>
    public class WizardImpl : WizardImplBase, IWizard
    {
        /// <summary>
        /// String containing the fully-qualified pathname of the erroneously-generated sub-folder of the
        /// Solution that is going to contain the individual projects' folders.
        /// </summary>
        private string _erroneouslyCreatedProjectContainerFolder;

        /*
        /// <summary>
        /// String containing the name of the folder that contains the generated <c>.sln</c> file.
        /// </summary>
        private string _solutionFileContainerFolderName;
        */

        /// <summary>Runs custom wizard logic when the wizard has completed all tasks.</summary>
        public void RunFinished()
        {
            // Here, _erroneouslyCreatedProjectContainerFolder holds the path to the
            // erroneously-created container folder for the
            // sub projects. When we get here, this folder should be
            // empty by now, so just remove it.

            if (!Directory.Exists(_erroneouslyCreatedProjectContainerFolder) ||
                !IsDirectoryEmpty(_erroneouslyCreatedProjectContainerFolder))
                return; // If the folder does not exist or is not empty, then do nothing

            if (Directory.Exists(_erroneouslyCreatedProjectContainerFolder))
                Directory.Delete(
                    _erroneouslyCreatedProjectContainerFolder, true
                );
        }

        /// <summary>Runs custom wizard logic at the beginning of a template wizard run.</summary>
        /// <param name="automationObject">
        /// The automation object being used by the template
        /// wizard.
        /// </param>
        /// <param name="replacementsDictionary">
        /// The list of standard parameters to be
        /// replaced.
        /// </param>
        /// <param name="runKind">
        /// A
        /// <see cref="T:Microsoft.VisualStudio.TemplateWizard.WizardRunKind" /> indicating
        /// the type of wizard run.
        /// </param>
        /// <param name="customParams">
        /// The custom parameters with which to perform
        /// parameter replacement in the project.
        /// </param>
        public override void RunStarted(object automationObject,
            Dictionary<string, string> replacementsDictionary,
            WizardRunKind runKind, object[] customParams)
        {
            base.RunStarted(automationObject, replacementsDictionary, runKind, customParams);

            try
            {
                // Grab the path to the folder that is erroneously created to contain the sub-projects.
                _erroneouslyCreatedProjectContainerFolder =
                    replacementsDictionary["$destinationdirectory$"];

                // Here, in the 'root' wizard, the $safeprojectname$ variable contains the name of the
                // containing folder of the .sln file generated by the process.
                //_solutionFileContainerFolderName = replacementsDictionary["$safeprojectname$"];

                LoadConfiguration();

                using (var dialogBox = new ExampleDialogBox(
                    _dte, _erroneouslyCreatedProjectContainerFolder
                ))
                {
                    dialogBox.CurrentConfiguration = CurrentConfiguration;

                    var dialogResult = dialogBox.ShowDialog();

                    DirectoryHelpers.RemoveParentDirectoryOf(
                        _erroneouslyCreatedProjectContainerFolder
                    );

                    if (dialogResult == DialogResult.Cancel)
                        throw new WizardCancelledException(
                            "Canceling the operation."
                        );

                    CurrentConfiguration = dialogBox.CurrentConfiguration;
                }

                SaveConfiguration();
            }
            catch (WizardCancelledException)
            {
                throw;
            }
            catch
            {
                DirectoryHelpers.RemoveParentDirectoryOf(
                    _erroneouslyCreatedProjectContainerFolder
                );

                // Re-throw the exception
                throw;
            }
        }

        /*
                private static void WriteBlankLineToLog()
                {
                    try
                    {
                        File.AppendAllText(
                            $@"C:\{DateTime.Now:yyyy-dd-M}_log.txt", "\r\n"
                        );
                    }
                    catch
                    {
                        //Ignored.
                    }
                }
        */
    }
}
